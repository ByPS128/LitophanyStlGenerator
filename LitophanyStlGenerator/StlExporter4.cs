namespace LitophanyStlGenerator;

public class StlExporter4 : IStlExporter
{
    private const string Author = "Author: Petr Škalodu aka ByPS";
    private const string Software = "Software: LitophanyStlGenerator";
    private const string Description = "Description: Raw generated by " + nameof(StlExporter4);

    public void SaveToFile(double[,] heightMap, int finalWidthMM, int finalHeightMM, string filename, int resolution)
    {
        int width = heightMap.GetLength(1);
        int height = heightMap.GetLength(0);
        double scaleX = (double)finalWidthMM / width;
        double scaleY = (double)finalHeightMM / height;

        try
        {
            using (BinaryWriter writer = new BinaryWriter(File.Open(filename, FileMode.Create)))
            {
                string header = CreateHeader();
                writer.Write(Encoding.ASCII.GetBytes(header.PadRight(80)));
                int numTriangles = width * height * 12; // 2 triangles per face, 6 faces per cube, 12 triangles per cube
                writer.Write(numTriangles);

                for (int y = 0; y < height; y++)
                {
                    for (int x = 0; x < width; x++)
                    {
                        double zHeight = heightMap[y, x];
                        WriteCube(writer, x * scaleX, y * scaleY, 0, scaleX, scaleY, zHeight);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Chyba při ukládání STL souboru: {ex.Message}");
        }
    }

    private void WriteCube(BinaryWriter writer, double x, double y, double z, double width, double depth, double height)
    {
        Vector3 v0 = new Vector3((float)x, (float)y, (float)z);
        Vector3 v1 = new Vector3((float)(x + width), (float)y, (float)z);
        Vector3 v2 = new Vector3((float)(x + width), (float)(y + depth), (float)z);
        Vector3 v3 = new Vector3((float)x, (float)(y + depth), (float)z);
        Vector3 v4 = new Vector3((float)x, (float)y, (float)(z + height));
        Vector3 v5 = new Vector3((float)(x + width), (float)y, (float)(z + height));
        Vector3 v6 = new Vector3((float)(x + width), (float)(y + depth), (float)(z + height));
        Vector3 v7 = new Vector3((float)x, (float)(y + depth), (float)(z + height));

        // Bottom face
        WriteTriangle(writer, v0, v1, v2);
        WriteTriangle(writer, v0, v2, v3);

        // Top face
        WriteTriangle(writer, v4, v5, v6);
        WriteTriangle(writer, v4, v6, v7);

        // Front face
        WriteTriangle(writer, v0, v1, v5);
        WriteTriangle(writer, v0, v5, v4);

        // Back face
        WriteTriangle(writer, v2, v3, v7);
        WriteTriangle(writer, v2, v7, v6);

        // Left face
        WriteTriangle(writer, v0, v3, v7);
        WriteTriangle(writer, v0, v7, v4);

        // Right face
        WriteTriangle(writer, v1, v2, v6);
        WriteTriangle(writer, v1, v6, v5);
    }

    private void WriteTriangle(BinaryWriter writer, Vector3 v0, Vector3 v1, Vector3 v2)
    {
        var normal = Vector3.Cross(v1 - v0, v2 - v0);
        normal = Vector3.Normalize(normal);

        writer.Write(normal.X);
        writer.Write(normal.Y);
        writer.Write(normal.Z);

        writer.Write(v0.X);
        writer.Write(v0.Y);
        writer.Write(v0.Z);
        writer.Write(v1.X);
        writer.Write(v1.Y);
        writer.Write(v1.Z);
        writer.Write(v2.X);
        writer.Write(v2.Y);
        writer.Write(v2.Z);

        writer.Write((ushort)0);
    }

    private string CreateHeader()
    {
        string header = $"{Author}; {Software}; {Description}";
        return header;
    }
}
