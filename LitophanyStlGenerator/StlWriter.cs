using System.Text;

namespace LitophanyStlGenerator;

public class StlWriter
{
    private const string Author = "Author: YourName";
    private const string Software = "Software: YourSoftware";
    private const string Description = "Description: Generated by STLExporter6";

    public void SaveToFile(Mesh mesh, string filename)
    {
        try
        {
            using (var writer = new BinaryWriter(File.Open(filename, FileMode.Create)))
            {
                string header = CreateHeader();
                writer.Write(Encoding.ASCII.GetBytes(header.PadRight(80)));
                writer.Write(mesh.Indices.Count / 3);

                for (var i = 0; i < mesh.Indices.Count; i += 3)
                {
                    Vector3 v0 = mesh.Vertices[mesh.Indices[i]];
                    Vector3 v1 = mesh.Vertices[mesh.Indices[i + 1]];
                    Vector3 v2 = mesh.Vertices[mesh.Indices[i + 2]];

                    WriteTriangle(writer, v0, v1, v2);
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Chyba při ukládání STL souboru: {ex.Message}");
        }
    }

    private void WriteTriangle(BinaryWriter writer, Vector3 v0, Vector3 v1, Vector3 v2)
    {
        Vector3 normal = Vector3.Cross(v1 - v0, v2 - v0);
        normal = Vector3.Normalize(normal);

        writer.Write(normal.X);
        writer.Write(normal.Y);
        writer.Write(normal.Z);

        writer.Write(v0.X);
        writer.Write(v0.Y);
        writer.Write(v0.Z);
        writer.Write(v1.X);
        writer.Write(v1.Y);
        writer.Write(v1.Z);
        writer.Write(v2.X);
        writer.Write(v2.Y);
        writer.Write(v2.Z);

        writer.Write((ushort) 0);
    }

    private string CreateHeader()
    {
        var header = $"{Author}; {Software}; {Description}";
        return header;
    }
}