using System;
using System.IO;
using System.Numerics;

namespace LitophanyStlGenerator
{
    public class StlExporter6 : IStlExporter
    {
        private const string Author = "Author: YourName";
        private const string Software = "Software: YourSoftware";
        private const string Description = "Description: Generated by STLExporter6";

        public void SaveAsSTL(double[,] heightMap, int finalWidthMM, int finalHeightMM, string filename, int resolution)
        {
            int width = heightMap.GetLength(1);
            int height = heightMap.GetLength(0);
            double scaleX = (double)finalWidthMM / width;
            double scaleY = (double)finalHeightMM / height;

            try
            {
                using (BinaryWriter writer = new BinaryWriter(File.Open(filename, FileMode.Create)))
                {
                    string header = CreateHeader();
                    writer.Write(System.Text.Encoding.ASCII.GetBytes(header.PadRight(80)));
                    int numTriangles = (width - 1) * (height - 1) * 2 + width * 2 + height * 2; // 2 triangles per pixel, plus sides and base
                    writer.Write(numTriangles);

                    // Write the top surface
                    for (int y = 0; y < height - 1; y++)
                    {
                        for (int x = 0; x < width - 1; x++)
                        {
                            Vector3 v0 = new Vector3((float)(x * scaleX), (float)(y * scaleY), (float)heightMap[y, x]);
                            Vector3 v1 = new Vector3((float)((x + 1) * scaleX), (float)(y * scaleY), (float)heightMap[y, x + 1]);
                            Vector3 v2 = new Vector3((float)(x * scaleX), (float)((y + 1) * scaleY), (float)heightMap[y + 1, x]);
                            Vector3 v3 = new Vector3((float)((x + 1) * scaleX), (float)((y + 1) * scaleY), (float)heightMap[y + 1, x + 1]);

                            WriteTriangle(writer, v0, v1, v3);
                            WriteTriangle(writer, v0, v3, v2);
                        }
                    }

                    // Write the sides
                    WriteSides(writer, heightMap, width, height, scaleX, scaleY);

                    // Write the base
                    WriteBase(writer, width, height, scaleX, scaleY);
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Chyba při ukládání STL souboru: {ex.Message}");
            }
        }

        private void WriteSides(BinaryWriter writer, double[,] heightMap, int width, int height, double scaleX, double scaleY)
        {
            // Front and back sides
            for (int x = 0; x < width - 1; x++)
            {
                Vector3 v0 = new Vector3((float)(x * scaleX), 0, 0);
                Vector3 v1 = new Vector3((float)((x + 1) * scaleX), 0, 0);
                Vector3 v2 = new Vector3((float)(x * scaleX), 0, (float)heightMap[0, x]);
                Vector3 v3 = new Vector3((float)((x + 1) * scaleX), 0, (float)heightMap[0, x + 1]);

                Vector3 v4 = new Vector3((float)(x * scaleX), (float)((height - 1) * scaleY), 0);
                Vector3 v5 = new Vector3((float)((x + 1) * scaleX), (float)((height - 1) * scaleY), 0);
                Vector3 v6 = new Vector3((float)(x * scaleX), (float)((height - 1) * scaleY), (float)heightMap[height - 1, x]);
                Vector3 v7 = new Vector3((float)((x + 1) * scaleX), (float)((height - 1) * scaleY), (float)heightMap[height - 1, x + 1]);

                // Front side
                WriteTriangle(writer, v0, v1, v2);
                WriteTriangle(writer, v1, v3, v2);

                // Back side
                WriteTriangle(writer, v4, v6, v5);
                WriteTriangle(writer, v5, v6, v7);
            }

            // Left and right sides
            for (int y = 0; y < height - 1; y++)
            {
                Vector3 v0 = new Vector3(0, (float)(y * scaleY), 0);
                Vector3 v1 = new Vector3(0, (float)((y + 1) * scaleY), 0);
                Vector3 v2 = new Vector3(0, (float)(y * scaleY), (float)heightMap[y, 0]);
                Vector3 v3 = new Vector3(0, (float)((y + 1) * scaleY), (float)heightMap[y + 1, 0]);

                Vector3 v4 = new Vector3((float)((width - 1) * scaleX), (float)(y * scaleY), 0);
                Vector3 v5 = new Vector3((float)((width - 1) * scaleX), (float)((y + 1) * scaleY), 0);
                Vector3 v6 = new Vector3((float)((width - 1) * scaleX), (float)(y * scaleY), (float)heightMap[y, width - 1]);
                Vector3 v7 = new Vector3((float)((width - 1) * scaleX), (float)((y + 1) * scaleY), (float)heightMap[y + 1, width - 1]);

                // Left side
                WriteTriangle(writer, v0, v2, v1);
                WriteTriangle(writer, v1, v2, v3);

                // Right side
                WriteTriangle(writer, v4, v5, v6);
                WriteTriangle(writer, v5, v7, v6);
            }
        }

        private void WriteBase(BinaryWriter writer, int width, int height, double scaleX, double scaleY)
        {
            Vector3 v0 = new Vector3(0, 0, 0);
            Vector3 v1 = new Vector3((float)((width - 1) * scaleX), 0, 0);
            Vector3 v2 = new Vector3((float)((width - 1) * scaleX), (float)((height - 1) * scaleY), 0);
            Vector3 v3 = new Vector3(0, (float)((height - 1) * scaleY), 0);

            WriteTriangle(writer, v0, v1, v2);
            WriteTriangle(writer, v0, v2, v3);
        }

        private void WriteTriangle(BinaryWriter writer, Vector3 v0, Vector3 v1, Vector3 v2)
        {
            var normal = Vector3.Cross(v1 - v0, v2 - v0);
            normal = Vector3.Normalize(normal);

            writer.Write(normal.X);
            writer.Write(normal.Y);
            writer.Write(normal.Z);

            writer.Write(v0.X);
            writer.Write(v0.Y);
            writer.Write(v0.Z);
            writer.Write(v1.X);
            writer.Write(v1.Y);
            writer.Write(v1.Z);
            writer.Write(v2.X);
            writer.Write(v2.Y);
            writer.Write(v2.Z);

            writer.Write((ushort)0);
        }

        private string CreateHeader()
        {
            string header = $"{Author}; {Software}; {Description}";
            return header;
        }
    }
}
