using System.Text;

namespace LitophanyStlGenerator;

public static class STLExporter
{
    // Konstanty pro metadata
    private const string Author = "Author: YourName";
    private const string Software = "Software: YourSoftware";
    private const string Description = "Description: Generated by STLExporter";

    /// <summary>
    ///     Uloží height mapu jako STL soubor.
    /// </summary>
    /// <param name="heightMap">Height mapa.</param>
    /// <param name="finalWidthMM">Konečná šířka v mm.</param>
    /// <param name="finalHeightMM">Konečná výška v mm.</param>
    /// <param name="filename">Název výstupního souboru.</param>
    public static void SaveAsSTL(double[,] heightMap, int finalWidthMM, int finalHeightMM, string filename)
    {
        int width = heightMap.GetLength(1);
        int height = heightMap.GetLength(0);
        double scaleX = (double) finalWidthMM / width;
        double scaleY = (double) finalHeightMM / height;

        try
        {
            using (var writer = new BinaryWriter(File.Open(filename, FileMode.Create)))
            {
                // Vytvoření a zápis hlavičky s metadaty
                string header = CreateHeader();
                writer.Write(Encoding.ASCII.GetBytes(header.PadRight(80))); // STL header musí být přesně 80 bajtů
                writer.Write(width * height * 2); // Počet trojúhelníků

                for (var y = 0; y < height - 1; y++)
                {
                    for (var x = 0; x < width - 1; x++)
                    {
                        var v0 = new Vector3((float) (x * scaleX), (float) (y * scaleY), (float) heightMap[y, x]);
                        var v1 = new Vector3((float) ((x + 1) * scaleX), (float) (y * scaleY), (float) heightMap[y + 1, x]);
                        var v2 = new Vector3((float) (x * scaleX), (float) ((y + 1) * scaleY), (float) heightMap[y, x + 1]);
                        var v3 = new Vector3((float) ((x + 1) * scaleX), (float) ((y + 1) * scaleY), (float) heightMap[y + 1, x + 1]);

                        // Zapsání dvou trojúhelníkových ploch
                        WriteTriangle(writer, v0, v1, v2);
                        WriteTriangle(writer, v1, v3, v2);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Chyba při ukládání STL souboru: {ex.Message}");
        }
    }

    private static void WriteTriangle(BinaryWriter writer, Vector3 v0, Vector3 v1, Vector3 v2)
    {
        Vector3 normal = Vector3.Cross(v1 - v0, v2 - v0);
        normal.Normalize();

        // Zapsání normálu trojúhelníku
        writer.Write(normal.X);
        writer.Write(normal.Y);
        writer.Write(normal.Z);

        // Zapsání tří vrcholů trojúhelníku
        writer.Write(v0.X);
        writer.Write(v0.Y);
        writer.Write(v0.Z);
        writer.Write(v1.X);
        writer.Write(v1.Y);
        writer.Write(v1.Z);
        writer.Write(v2.X);
        writer.Write(v2.Y);
        writer.Write(v2.Z);

        writer.Write((ushort) 0); // Zapsání atributu (2 bajty)
    }

    private static string CreateHeader()
    {
        // Sestavení hlavičky s metadaty
        var header = $"{Author}; {Software}; {Description}";
        return header;
    }
}

public struct Vector3
{
    public float X, Y, Z;

    public Vector3(float x, float y, float z)
    {
        X = x;
        Y = y;
        Z = z;
    }

    public static Vector3 operator -(Vector3 a, Vector3 b)
    {
        return new Vector3(a.X - b.X, a.Y - b.Y, a.Z - b.Z);
    }

    public static Vector3 Cross(Vector3 a, Vector3 b)
    {
        return new Vector3(
            a.Y * b.Z - a.Z * b.Y,
            a.Z * b.X - a.X * b.Z,
            a.X * b.Y - a.Y * b.X
        );
    }

    public void Normalize()
    {
        var length = (float) Math.Sqrt(X * X + Y * Y + Z * Z);
        if (length > 0)
        {
            X /= length;
            Y /= length;
            Z /= length;
        }
    }
}